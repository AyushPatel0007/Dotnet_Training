//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stored_Procedure.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbbEntities : DbContext
    {
        public DbbEntities()
            : base("name=DbbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual int DeleteBook(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBook", idParameter);
        }
    
        public virtual int DeletebyId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletebyId", idParameter);
        }
    
        public virtual int InsertBook(Nullable<int> bookid, string bookname, string author, string publisher, Nullable<int> price)
        {
            var bookidParameter = bookid.HasValue ?
                new ObjectParameter("Bookid", bookid) :
                new ObjectParameter("Bookid", typeof(int));
    
            var booknameParameter = bookname != null ?
                new ObjectParameter("Bookname", bookname) :
                new ObjectParameter("Bookname", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBook", bookidParameter, booknameParameter, authorParameter, publisherParameter, priceParameter);
        }
    
        public virtual int InsertStudent(string name, string email, string password, Nullable<int> did)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudent", nameParameter, emailParameter, passwordParameter, didParameter);
        }
    
        public virtual ObjectResult<SelectBook_Result> SelectBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBook_Result>("SelectBook");
        }
    
        public virtual ObjectResult<SelectbyId_Result> SelectbyId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectbyId_Result>("SelectbyId", idParameter);
        }
    
        public virtual ObjectResult<SelectStudent_Result> SelectStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStudent_Result>("SelectStudent");
        }
    
        public virtual int UpdateBook(Nullable<int> bookid, string bookname, string author, string publisher, Nullable<int> price)
        {
            var bookidParameter = bookid.HasValue ?
                new ObjectParameter("Bookid", bookid) :
                new ObjectParameter("Bookid", typeof(int));
    
            var booknameParameter = bookname != null ?
                new ObjectParameter("Bookname", bookname) :
                new ObjectParameter("Bookname", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var publisherParameter = publisher != null ?
                new ObjectParameter("Publisher", publisher) :
                new ObjectParameter("Publisher", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBook", bookidParameter, booknameParameter, authorParameter, publisherParameter, priceParameter);
        }
    
        public virtual int UpdatebyId(Nullable<int> id, string name, string email, string password, Nullable<int> did)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatebyId", idParameter, nameParameter, emailParameter, passwordParameter, didParameter);
        }
    
        public virtual int InsertDepartment(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepartment", nameParameter);
        }
    
        public virtual ObjectResult<SelectDepartment_Result> SelectDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectDepartment_Result>("SelectDepartment");
        }
    
        public virtual int deletedeptbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deletedeptbyid", idParameter);
        }
    }
}
